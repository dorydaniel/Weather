{"version":3,"sources":["components/WeatherCard/Location.js","components/WeatherCard/Icon.js","components/WeatherCard/Condition.js","components/WeatherCard/Component.js","components/WeatherEngine.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","country","City","styled","h1","Country","h2","Icon","condition","img","icon","src","process","alt","Condition","temp","Temp","Status","h3","WeatherCard","highColor","lowColor","isLoading","error","resetError","Card","div","ErrorDiv","className","style","padding","onClick","WeatherEngine","location","SearchBtn","button","useState","query","setQuery","setIsLoading","setError","weather","setWeather","getWeather","q","a","fetch","apiRes","json","resJson","name","sys","main","useEffect","margin","textAlign","position","type","borderRadius","fontFamily","outline","backgroundColor","value","onChange","e","target","preventDefault","handleClick","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+jBAGA,IAmBeA,EAnBE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAClBC,EAAOC,IAAOC,GAAV,KAKJC,EAAUF,IAAOG,GAAV,KAKb,OACE,6BACE,kBAACJ,EAAD,KAAOF,GACP,kBAACK,EAAD,KAAUJ,K,0FCdhB,IAoDeM,EApDF,YAAoB,IAAjBC,EAAgB,EAAhBA,UACRD,EAAOJ,IAAOM,IAAV,KAINC,EAAO,GACX,OAAQF,GACN,IAAK,SACHE,EAAO,6BACP,MACF,IAAK,QACHA,EAAO,4BACP,MACF,IAAK,OACHA,EAAO,oBACP,MACF,IAAK,OACHA,EAAO,oBACP,MACF,IAAK,MACHA,EAAO,mBACP,MACF,IAAK,UACHA,EAAO,uBACP,MACF,IAAK,OACHA,EAAO,oBACP,MACF,IAAK,OACHA,EAAO,mBACP,MACF,IAAK,OACHA,EAAO,oBACP,MACF,IAAK,OACHA,EAAO,oBACP,MACF,IAAK,UACHA,EAAO,uBACP,MACF,IAAK,eACHA,EAAO,mCACP,MACF,QACEA,EAAO,mBAKX,OAAO,kBAACH,EAAD,CAAMI,IAAKC,WAAyBF,EAAMG,IAAI,kB,gTCjDvD,IAoBeC,EApBG,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMP,EAAgB,EAAhBA,UACnBQ,EAAOb,IAAOC,GAAV,KAMJa,EAASd,IAAOe,GAAV,KAKZ,OACE,oCACE,kBAACF,EAAD,KAAOD,EAAP,UACA,kBAACE,EAAD,KAAST,K,6mBCXf,IAqEeW,EArEK,SAAC,GAQd,IACDC,EACAC,EATJN,EAOI,EAPJA,KACAP,EAMI,EANJA,UACAR,EAKI,EALJA,KACAC,EAII,EAJJA,QACAqB,EAGI,EAHJA,UACAC,EAEI,EAFJA,MACAC,EACI,EADJA,WAMEH,EAFEN,EAAO,IACTK,EAAqC,KAAxB,GAAKL,EAAO,IAAM,KACR,KAEvBK,EAAqC,KAAxB,GAAKL,EAAO,IAAM,KACR,IAGzB,IAAMU,EAAOtB,IAAOuB,IAAV,IAIAX,EAAO,GAAK,IAAM,EAAMK,EAAcL,EAAO,GAAK,EAAI,IACtDA,EAAO,GAAK,IAAM,EAAMM,EAAaN,EAAO,GAAK,EAAI,KAWzDY,EAAWxB,IAAOuB,IAAV,KASd,OACE,kBAACD,EAAD,KACGH,EACC,yBAAKM,UAAU,mBACbL,EACF,kBAACI,EAAD,KACE,wCACA,6BACA,gDACA,6BACA,4BAAQE,MAAO,CAAEC,QAAS,SAAWC,QAASP,GAA9C,OAKF,oCACE,kBAAC,EAAD,CAAUxB,KAAMA,EAAMC,QAASA,IAC/B,kBAAC,EAAD,CAAMO,UAAWA,IACjB,kBAAC,EAAD,CAAWO,KAAMA,EAAMP,UAAWA,O,uJChE5C,IA6EewB,EA7EO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBC,EAAY/B,IAAOgC,OAAV,KADuB,EAOZC,mBAASH,GAPG,mBAO/BI,EAP+B,KAOxBC,EAPwB,OAQJF,oBAAS,GARL,mBAQ/Bd,EAR+B,KAQpBiB,EARoB,OASZH,oBAAS,GATG,mBAS/Bb,EAT+B,KASxBiB,EATwB,OAURJ,mBAAS,CACrCpC,KAAM,KACNC,QAAS,KACTc,KAAM,KACNP,UAAW,OAdyB,mBAU/BiC,EAV+B,KAUtBC,EAVsB,KAiBhCC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACjBN,GAAa,GADI,kBAGMO,MAAM,qDAAD,OAC6BF,EAD7B,yDAHX,cAGTG,EAHS,gBAMOA,EAAOC,OANd,OAMTC,EANS,OAOfP,EAAW,CACT1C,KAAMiD,EAAQC,KACdjD,QAASgD,EAAQE,IAAIlD,QACrBc,KAAMkC,EAAQG,KAAKrC,KACnBP,UAAWyC,EAAQR,QAAQ,GAAGW,OAXjB,kDAcfZ,GAAS,GAdM,QAgBjBD,GAAa,GAhBI,0DAAH,sDA4BhB,OAJAc,qBAAU,WACRV,EAAWV,KACV,CAACA,IAGF,yBAAKJ,MAAO,CAAEyB,OAAQ,KAAMC,UAAW,SAAUC,SAAU,aACzD,kBAAC,EAAD,CACEzC,KAAM0B,EAAQ1B,KACdP,UAAWiC,EAAQjC,UACnBR,KAAMyC,EAAQzC,KACdC,QAASwC,EAAQxC,QACjBqB,UAAWA,EACXC,MAAOA,EACPC,WAAY,kBAAMgB,GAAS,MAE7B,8BACE,2BACEiB,KAAK,OACL5B,MAAO,CACL6B,aAAc,OACd5B,QAAS,KACTyB,UAAW,SACXI,WAAY,wBACZC,QAAS,OACTC,gBAAiB,yBAEnBC,MAAOzB,EACP0B,SAAU,SAACC,GAAD,OAAO1B,EAAS0B,EAAEC,OAAOH,UAErC,6BACA,kBAAC5B,EAAD,CAAWH,QAAS,SAACiC,GAAD,OAnCN,SAACA,GACnBA,EAAEE,iBACFvB,EAAWN,GAiCoB8B,CAAYH,KAAvC,aC7DOI,MAXf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,CAAeK,SAAS,WACxB,kBAAC,EAAD,CAAeA,SAAS,WACxB,kBAAC,EAAD,CAAeA,SAAS,eACxB,kBAAC,EAAD,CAAeA,SAAS,YCEVoC,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5D,GACL6D,QAAQ7D,MAAMA,EAAM8D,c","file":"static/js/main.ac61465a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Location = ({ city, country }) => {\r\n  const City = styled.h1`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 1.6rem;\r\n  `;\r\n\r\n  const Country = styled.h2`\r\n    font-family: \"Fira Sans\", sans-serif;\r\n    font-size: 1.1rem;\r\n  `;\r\n\r\n  return (\r\n    <div>\r\n      <City>{city}</City>\r\n      <Country>{country}</Country>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Icon = ({ condition }) => {\r\n  const Icon = styled.img`\r\n    width: 40%;\r\n  `;\r\n\r\n  var icon = \"\";\r\n  switch (condition) {\r\n    case \"Clouds\":\r\n      icon = \"/imgs/Mostly Cloudy-2x.png\";\r\n      break;\r\n    case \"Clear\":\r\n      icon = \"/imgs/Mostly Sunny-2x.png\";\r\n      break;\r\n    case \"Haze\":\r\n      icon = \"/imgs/Haze-2x.png\";\r\n      break;\r\n    case \"Hail\":\r\n      icon = \"/imgs/Hail-2x.png\";\r\n      break;\r\n    case \"Fog\":\r\n      icon = \"/imgs/Fog-2x.png\";\r\n      break;\r\n    case \"Tornado\":\r\n      icon = \"/imgs/Tornado-2x.png\";\r\n      break;\r\n    case \"Dust\":\r\n      icon = \"/imgs/Dust-2x.png\";\r\n      break;\r\n    case \"Mist\":\r\n      icon = \"/imgs/Fog-2x.png\";\r\n      break;\r\n    case \"Snow\":\r\n      icon = \"/imgs/Snow-2x.png\";\r\n      break;\r\n    case \"Rain\":\r\n      icon = \"/imgs/Rain-2x.png\";\r\n      break;\r\n    case \"Drizzle\":\r\n      icon = \"/imgs/Drizzle-2x.png\";\r\n      break;\r\n    case \"Thunderstorm\":\r\n      icon = \"/imgs/Severe Thunderstorm-2x.png\";\r\n      break;\r\n    default:\r\n      icon = \"/imgs/Fog-2x.png\";\r\n      break;\r\n  }\r\n\r\n  // return <Icon src={window.location.origin + icon} alt=\"Weather Icon\" />;\r\n  return <Icon src={process.env.PUBLIC_URL + icon} alt=\"Weather Icon\" />;\r\n};\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Condition = ({ temp, condition }) => {\r\n  const Temp = styled.h1`\r\n    font-family: \"Fira Sans\", sans-serif;\r\n    font-size: 2rem;\r\n    font-weight: 200;\r\n  `;\r\n\r\n  const Status = styled.h3`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 1.2rem;\r\n  `;\r\n\r\n  return (\r\n    <>\r\n      <Temp>{temp} Â°C</Temp>\r\n      <Status>{condition}</Status>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Condition;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport Location from \"./Location\";\r\nimport Icon from \"./Icon\";\r\nimport Condition from \"./Condition\";\r\n\r\nconst WeatherCard = ({\r\n  temp,\r\n  condition,\r\n  city,\r\n  country,\r\n  isLoading,\r\n  error,\r\n  resetError,\r\n}) => {\r\n  let highColor;\r\n  let lowColor;\r\n  if (temp > 12) {\r\n    highColor = (1 - (temp - 12) / 28) * 255;\r\n    lowColor = highColor - 150;\r\n  } else {\r\n    highColor = (1 - (temp + 20) / 32) * 255;\r\n    lowColor = highColor - 150;\r\n  }\r\n\r\n  const Card = styled.div`\r\n    margin: 2% auto;\r\n    background: linear-gradient(\r\n      to top,\r\n      rgb(${temp > 12 ? 255 : 0}, ${highColor}, ${temp > 12 ? 0 : 255}),\r\n      rgb(${temp > 12 ? 255 : 0}, ${lowColor}, ${temp > 12 ? 0 : 255})\r\n    );\r\n    width: 200px;\r\n    height: 240px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    border-radius: 15px;\r\n  `;\r\n\r\n  const ErrorDiv = styled.div`\r\n    font-family: \"Fira Sans\", sans-serif;\r\n    height: 100%;\r\n    justify-content: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  `;\r\n\r\n  return (\r\n    <Card>\r\n      {isLoading ? (\r\n        <div className=\"spinner-border\"></div>\r\n      ) : error ? (\r\n        <ErrorDiv>\r\n          <h2>Invalid!</h2>\r\n          <br />\r\n          <h3>Please try again</h3>\r\n          <br />\r\n          <button style={{ padding: \"0% 1%\" }} onClick={resetError}>\r\n            OK\r\n          </button>\r\n        </ErrorDiv>\r\n      ) : (\r\n        <>\r\n          <Location city={city} country={country} />\r\n          <Icon condition={condition} />\r\n          <Condition temp={temp} condition={condition} />\r\n        </>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport WeatherCard from \"./WeatherCard/Component\";\r\n\r\nconst WeatherEngine = ({ location }) => {\r\n  const SearchBtn = styled.button`\r\n    padding: 1%;\r\n    margin: 2%;\r\n    font-family: \"Fira Sans\", sans-serif;\r\n  `;\r\n\r\n  const [query, setQuery] = useState(location);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [weather, setWeather] = useState({\r\n    city: null,\r\n    country: null,\r\n    temp: null,\r\n    condition: null,\r\n  });\r\n\r\n  const getWeather = async (q) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const apiRes = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${q}&units=metric&APPID=d265e4ce81a183424e3f69a1dbb0bb9b`\r\n      );\r\n      const resJson = await apiRes.json();\r\n      setWeather({\r\n        city: resJson.name,\r\n        country: resJson.sys.country,\r\n        temp: resJson.main.temp,\r\n        condition: resJson.weather[0].main,\r\n      });\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    getWeather(query);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeather(location);\r\n  }, [location]);\r\n\r\n  return (\r\n    <div style={{ margin: \"3%\", textAlign: \"center\", position: \"relative\" }}>\r\n      <WeatherCard\r\n        temp={weather.temp}\r\n        condition={weather.condition}\r\n        city={weather.city}\r\n        country={weather.country}\r\n        isLoading={isLoading}\r\n        error={error}\r\n        resetError={() => setError(false)}\r\n      />\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          style={{\r\n            borderRadius: \"10px\",\r\n            padding: \"2%\",\r\n            textAlign: \"center\",\r\n            fontFamily: \"Fira Sans, sans-serif\",\r\n            outline: \"none\",\r\n            backgroundColor: \"rgba(255,255,255,0.3)\",\r\n          }}\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n        />\r\n        <br />\r\n        <SearchBtn onClick={(e) => handleClick(e)}>Search</SearchBtn>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherEngine;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport WeatherEngine from \"./components/WeatherEngine\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherEngine location=\"alaska\" />\n      <WeatherEngine location=\"brazil\" />\n      <WeatherEngine location=\"antarktika\" />\n      <WeatherEngine location=\"qatar\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}